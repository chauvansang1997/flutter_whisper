group 'com.plugin.whisper.flutter_whisper'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.plugin.whisper.flutter_whisper'
    }

    compileSdk 34
    ndkVersion "25.2.9519653"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 26
//        ndk {
//            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
//        }
//        externalNativeBuild {
//            cmake {
//                // When set, builds whisper.android against the version located
//                // at GGML_HOME instead of the copy bundled with whisper.cpp.
//                if (
//                    project.hasProperty('GGML_HOME') &&
//                    project.findProperty('GGML_CLBLAST') == 'ON'
//                ) {
//                    // Turning on CLBlast requires GGML_HOME
//                    arguments "-DGGML_HOME=${project.property('GGML_HOME')}",
//                         "-DGGML_CLBLAST=ON",
//                         "-DOPENCL_LIB=${project.property('OPENCL_LIB')}",
//                         "-DCLBLAST_HOME=${project.property('CLBLAST_HOME')}",
//                         "-DOPENCL_ROOT=${project.property('OPENCL_ROOT')}",
//                         "-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=BOTH",
//                         "-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=BOTH"
//                } else if (project.hasProperty('GGML_HOME')) {
//                    arguments "-DGGML_HOME=${project.property('GGML_HOME')}"
//                }
//
//            }
//        }

    }
    
//    externalNativeBuild {
//        cmake {
//            path "cpp/CMakeLists.txt"
//        }
//    }

    dependencies {
        implementation fileTree(include: ['*.jar', '.so'], dir: 'libs')
        implementation project(':flutter_whisper:lib')

        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
